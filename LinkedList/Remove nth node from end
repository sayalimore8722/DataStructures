/*
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:
Given n will always be valid.
Try to do this in one pass.
*/

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        
        ListNode before = head, slow = head, fast = head;
        int i = 0;
        if(head == null)
            return head;
        else if(head.next == null && n == 1)
            return null;
        else
        {
        while(i<(n-1))
        {
            fast=fast.next;
            i++;
        }
        
        while(fast.next!=null)
        {
            before = slow;
            fast=fast.next;
            slow=slow.next;
        }
        
            if(before == slow)
                head = slow.next;
            else if(slow == fast)
                before.next = null;
            else 
                before.next = slow.next;
        
        }
     return head;   
    }
}
