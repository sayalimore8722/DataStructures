/*
Problem Statement :
You are given the pointer to the head node of a linked list and you need to print all its elements in 
reverse order from tail to head, one element per line.
The head pointer may be null meaning that the list is empty - in that case, do not print anything!
*/


public class NodeStructure {


	int value;
	public NodeStructure next;
	public NodeStructure head;
	public NodeStructure temp;
	
	public NodeStructure()
	{	
		value=0;
		next=null;	
		head=null;
	}
	
	public NodeStructure createLinkedList(NodeStructure node,int data)
	{
		if(head==null)
		{
			System.out.println("I m creating");
			
			
			
			node.value=data;
			node.next=null;
			head=node;
			
		
			System.out.println("I have created");
		}
		
		return head; 
	}
	
	public NodeStructure insertAtHead(NodeStructure node,int data)
	{
		if(head!=null)
		{
			temp=head;
			
			node.next=temp;
			node.value=data;
			
			head=node;
		}
		return head;
	}
	
	public NodeStructure insertAtTail(NodeStructure node,int data)
	{
		if(head!=null)
		{
			temp=head;
			
			while(temp.next!=null)
			{
				temp=temp.next;
			}
			
			node.next=null;
			node.value=data;
			
			temp.next=node;
		}
		return head;
	}
	
	public NodeStructure insertAtPosition(NodeStructure node,int data,int pos)
	{
		int counter=0;
		
		temp=head;
		
		while(counter!=(pos-1))
		{
			System.out.println("*****Counter : "+counter);
			counter++;
			temp=temp.next;
		}
		
		System.out.println("Counter : "+counter);
		System.out.println("Data : "+temp.value);
		
		node.next=temp.next;
		node.value=data;
		
		temp.next=node;
		
		return head;
	}
	
	
	public void deleteNode(int pos)
	{
		int counter=0;
		
		temp=head;
		
		while(counter!=(pos-1))
		{
			counter++;
			temp=temp.next;
		}
		
		temp.next=(temp.next).next;
	}
	
	public void deleteNodeAtStart()
	{
		temp=head;
		
		head=temp.next;
	}
	
	public void deleteTailNode()
	{
		NodeStructure prevTemp=null; 
		
		temp=head;
		
		while(temp.next!=null)
		{
			prevTemp=temp;
			temp=temp.next;
		}
		
		prevTemp.next=null;
	}
	
	public void reversal(NodeStructure head)
	{
		/*
		if(head==null)
			return;
		*/
		 
		
		    if(head!=null)
		    {
		    	
		    	reversal(head.next);
		    	System.out.println(head.value);
			}
		 
		   
	
	}
	
	public void printLinkedList()
	{
		System.out.println("I m printing");
		if(head==null)
		{
			System.out.println("Linked list is empty");
		}
		else
		{
			System.out.println("I m in else");
			temp=head;
			
			while(temp!=null)
			{
				System.out.println("In While");
				System.out.println(temp.value);
		
				temp=temp.next;
				
			}
			
		}
			
	}

}

public class PrintReverse {

	public static void main(String[] args) {

		System.out.println("*****************Creation**********************");
		
		System.out.println("Creating Linked List");
		NodeStructure node=new NodeStructure();
		NodeStructure n=node.createLinkedList(node,10);
		node.printLinkedList();
		
		System.out.println("*****************Insertion**********************");

		System.out.println("Inserting node at tail of Linked List");
		NodeStructure node1=new NodeStructure();
		NodeStructure n1=node.insertAtTail(node1,20);
		node.printLinkedList();
		
		System.out.println("Inserting node at tail of Linked List");
		NodeStructure node2=new NodeStructure();
		NodeStructure n2=node.insertAtTail(node2,30);
		node.printLinkedList();
		
		System.out.println("Inserting node at head of Linked List");
		NodeStructure node3=new NodeStructure();
		NodeStructure n3=node.insertAtHead(node3,50);
		node.printLinkedList();
		
		System.out.println("Inserting node at specified position in Linked List");
		NodeStructure node4=new NodeStructure();
		NodeStructure n4=node.insertAtPosition(node4,100,2);
		node.printLinkedList();
		

		System.out.println("*****************Print Reversal**********************");
		node.reversal(n4);
	}

}
