/*
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0
*/


class Solution {
    public int searchInsert(int[] nums, int target) {
        int mid = 0, start = 0, end = (nums.length-1);
        if(target < nums[start])
            return 0;
        else if(target > nums[end])
            return nums.length;
        else
        {
        //case 1 : Array contains the element use binary search
        while(start <= end)
        {
            mid = (start + end)/2;
            
            if(nums[mid] == target)
                return mid;
            else if(nums[mid]>target)
                end = mid-1;
            else
                start = mid+1;
        }
        //Case 2 : Array does not contain the element
        for(int i=0; i<nums.length; i++)
        {
            if(target < nums[i])
                return i;
        }
        }
        return 0;
    }
}
