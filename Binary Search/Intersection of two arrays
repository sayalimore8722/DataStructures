/*
Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2].

Note:
Each element in the result must be unique.
The result can be in any order.
*/

class Solution {
    public boolean binarySearch(int[] array,int num)
    {
        int mid = 0, start = 0, end = (array.length-1); 
        while(start <= end)
        {
            mid = (start + end)/2;
            
            if(array[mid] == num)
                return true;
            else if(num < array[mid])
                end = mid - 1;
            else if(num > array[mid])
                start = mid + 1;
        }
        return false;
    }
    public int[] intersection(int[] nums1, int[] nums2) {
        ArrayList<Integer> proxy = new ArrayList<Integer>();
        int[] result1 = {};
        boolean flag = false;
        
        if(nums1.length == 0)
            return nums1;
        else
        {
            for(int i=0; i<nums1.length-1; i++)
            {
                for(int j=0; j<(nums1.length)-i-1; j++)
                {
                    if(nums1[j]>nums1[j+1])
                    {
                        int temp = nums1[j];
                        nums1[j] = nums1[j+1];
                        nums1[j+1] = temp;
                    }
                }
            }

            for(int i=0; i<nums2.length; i++)
            {
                flag = binarySearch(nums1,nums2[i]);
                if(flag == true)
                {
                    if(!proxy.contains(nums2[i]))
                    {
                        proxy.add(nums2[i]);
                    }
                }
            }
            int[] result = new int[proxy.size()];
            for(int i=0; i<proxy.size(); i++)
            {
                result[i] = proxy.get(i);
            }
        return result;
        }
   
    }
}
