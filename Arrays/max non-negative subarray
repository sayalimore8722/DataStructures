/*
Problem Statement :
Max Non Negative SubArrayBookmark Suggest Edit
Find out the maximum sub-array of non negative numbers from an array.
The sub-array should be continuous. That is, a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:

A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]
NOTE: If there is a tie, then compare with segment's length and return segment which has maximum length
NOTE 2: If there is still a tie, then return the segment with minimum starting index
*/

public class Solution {
	public ArrayList<Integer> maxset(ArrayList<Integer> a) {
	    int i = 0, j = 0, start = 0, end = 0, prev_start = 0, prev_end = 0;
	    ArrayList<Integer> result = new ArrayList<Integer>();
	    long sum = 0, prev_sum = 0;
	    
	    while(j < a.size())
	    {
	        while((end < a.size()) && (a.get(end)) >= 0)
	        {
	            sum = sum + (a.get(end));
	            end++;
	        }
	      
	           
	        if(sum > prev_sum)
	        {
	            result.clear();
	            for(int k = start; k<end; k++)
	            {
	                result.add(a.get(k));
	                //result.add(Integer.toUnsignedLong(a.get(k)));
	            }
	            prev_sum = sum;
	            prev_start = start;
	            prev_end = end;
	        }
	        else if(sum == prev_sum)
	        {
	            if((end - start) > (prev_end - prev_start))
	            {
	                result.clear();
    	            for(int k = start; k<end; k++)
    	            {
    	                result.add(a.get(k));
    	            }
    	            prev_sum = sum;
    	            prev_start = start;
    	            prev_end = end;
	            }
	            else if((end - start) == (prev_end - prev_start))
	            {
	               if(prev_start > start)
	               {
	                result.clear();
    	            for(int k = start; k<end; k++)
    	            {
    	                result.add(a.get(k));
    	            }
    	            prev_sum = sum;
    	            prev_start = start;
    	            prev_end = end;
	               }
	                   
	                    
	            }
	                
	        }
	       
	        if(end == a.size())
	            break;
	        j++;
	        start = end+1;
	        end = end+1;
	        sum = 0;
	    }
	    
	    return result;
	}
}
