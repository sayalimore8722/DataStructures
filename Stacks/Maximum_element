/*Problem : 
You have an empty sequence, and you will be given  queries. Each query is one of these three types:

1 x  -Push the element x into the stack.
2    -Delete the element present at the top of the stack.
3    -Print the maximum element in the stack.
*/

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
    public long[] stack = new long[4000000]; 
	int top;
    long maxSize, topElement;
    
    public Solution()
	{
		  top = -1;
		  maxSize = 40000;
    }
    
    public void push(long element)
	{
		stack[++top] = element;
	}
	
	public long pop()
	{
		return stack[top--];
	}
	
	public boolean isEmpty()
	{
		return (top == -1);
	}
	
	public long deleteTop()
	{
		if(!isEmpty())
		{
			topElement = stack[top--];
		}
		return topElement;
	}
	
	public void showStack()
	{
		for(int i = 0; i<=top; i++)
		{
			System.out.println(stack[i]);
		}
	}
	
	public long printMax()
	{
		long maxNu = stack[top];
		
		for(int i = 0; i <= top; i++)
		{
			if(maxNu < stack[i])
				maxNu = stack[i];
		}
		return maxNu;
		
	}

    public static void main(String[] args) {
        
        Solution s = new Solution();
        Scanner sc =  new Scanner(System.in);
        long slength = sc.nextLong();
        
        for(int i = 0; i < slength; i++)
        {
            int query = sc.nextInt();
            if( query == 1)
            {
                long operation = sc.nextLong();
                s.push(operation);
            }
            else if( query == 2 )
            {
                s.pop();
            }
            else if( query == 3 )
            {
                long max = s.printMax();
                System.out.println(max);
            }
            else
            {
                System.out.println("Wrong query");
            }
        }
    }
}
